@{
    ViewData["Title"] = "Add Patient Information";
    List<SelectListItem> GenderCodeList = (List<SelectListItem>)ViewBag.GenderCodeList;
    PatientViewModel PatientViewModel = (PatientViewModel)ViewBag.PatientViewModel;
}

<div id="patientForm">
    <div class="modal-header">
        <h1 class="display-4">Add Patient Information</h1>
    </div>

    <div class="modal-body">
        <label class="control-label">Select a Patient (Dummy Data)</label>
        <select class="form-control" id="dummyPatientSelect" onchange="fillDummyData()">
            <option value="">-- Select a Dummy Patient --</option>
            <option value="1">Fake Data 1</option>
            <option value="2">Fake Data 2</option>
            <option value="3">Fake Invalid Data 3</option>
        </select>
    </div>

    <div class="modal-body">
        <div class="row">
            <div class="form-inline col-md-6">
                <label class="control-label">Last Name</label>
                <input type="text" class="form-control" id="FamilyName" name="FamilyName" value="@PatientViewModel.FamilyName" required>
            </div>
            <div class="form-inline col-md-6">
                <label class="control-label">First Name</label>
                <input type="text" class="form-control" id="GivenName" name="GivenName" value="@PatientViewModel.GivenName" required>
            </div>
        </div>
        <div class="row">
            <div class="form-inline col-md-3">
                <label class="control-label">ID Number</label>
                <input type="text" class="form-control" id="IdNo" name="IdNo"
                       value="@PatientViewModel.IdNo"
                       oninput="validateIdNo()"
                       required>
            </div>
            <div class="form-inline col-md-3">
                <label class="control-label">Date of Birth</label>
                <input type="date" class="form-control" id="Birthday" name="Birthday" value="@PatientViewModel.Birthday.ToString("yyyy-MM-dd")" required>
            </div>
            <div class="form-inline col-md-3">
                <label class="control-label">Gender</label>
                @Html.DropDownList("Gender", GenderCodeList, "Please Select Gender", new { @class = "form-control", id = "Gender" })
            </div>
            <div class="form-group col-md-3">
                <label class="control-label">Phone Number</label>
                <input type="text" class="form-control" id="Telecom"
                       value="@((string.IsNullOrEmpty(PatientViewModel.Telecom) ? "09" : PatientViewModel.Telecom))"
                       oninput="validateTelecom()"
                       required>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-md-12">
                <label class="control-label">Address</label>
                <textarea class="form-control" rows="3" id="Address" name="Address">@PatientViewModel.Address</textarea>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-primary" onClick="Submit()">Save</button>
        </div>
    </div>
</div>

<script>

    const dummyPatients = {
        "1": {
            FamilyName: "hello",
            GivenName: "world",
            IdNo: "A123456789",
            Birthday: "1990-01-01",
            Gender: "M",
            Telecom: "0912345678",
            Address: "台北車站, This is the invalid data for test purpose only"
        },
        "2": {
            FamilyName: "Foo",
            GivenName: "Bar",
            IdNo: "AB12345678",
            Birthday: "1985-05-15",
            Gender: "F",
            Telecom: "0987654321",
            Address: "Taipei Main Station, This is the invalid data for test purpose only"
        },
        "3": {
            FamilyName: "WrongData4Test",
            GivenName: "ModifyToTest",
            IdNo: "A!12345678",
            Birthday: "1985-05-15",
            Gender: "F",
            Telecom: "0487654321",
            Address: "This is the invalid data for test purpose only"
        }
    };

    function validateTelecom() {
        const telecom = document.getElementById("Telecom").value;
        // Format of cellphone num in Taiwan
        const telecomPattern = /^09\d{8}$/;

        if (!telecomPattern.test(telecom)) {
            console.error(`Invalid Telecom Number: "${telecom}". It must start with '09' and contain exactly 10 digits.`);
            alert("Invalid Contact Number. The number must start with '09' and contain exactly 10 digits.");
            document.getElementById("Telecom").classList.add("is-invalid");
            return false;
        } else {
            document.getElementById("Telecom").classList.remove("is-invalid");
            return true;
        }
    }

    function validateIdNo() {
        const IdNo = document.getElementById("IdNo").value;
        // Format of ID for Taiwanese citizen in regular expression
        const IdNoPatternCitizen = /^[A-Z][0-9]{9}$/;
        // Format of ID for ARC Holder in regular expression
        const IdNoPatternResident = /^[A-Z]{2}[0-9]{8}$/;

        if (IdNo.length != 10) {
            console.error('Invalid ID Number format.');
            alert('Your ID Number must be exactly 10 characters.');
            document.getElementById("IdNo").classList.add("is-invalid");
            return false;
        }

        if (!IdNoPatternCitizen.test(IdNo) && !IdNoPatternResident.test(IdNo)) {
            console.error(`Invalid ID Number: "${IdNo}"`);
            alert("Invalid ID Format. Please check your data.");
            document.getElementById("IdNo").classList.add("is-invalid");
            return false;
        } else {
            document.getElementById("IdNo").classList.remove("is-invalid");
            return true;
        }
    }

    function validateBirthday() {
        const birthday = document.getElementById("Birthday").value;
        // Regular expression in yyyy-mm-dd
        const birthdayPattern = /^\d{4}-\d{2}-\d{2}$/;

        if (!birthdayPattern.test(birthday)) {
            console.error(`Invalid Birthday Format: "${birthday}". Expected format is YYYY-MM-DD.`);
            alert("Invalid Birthday format. Please use YYYY-MM-DD format.");
            document.getElementById("Birthday").classList.add("is-invalid");
            return false;
        } else {
            document.getElementById("Birthday").classList.remove("is-invalid");
            return true;
        }
    }

    function fillDummyData() {
        const selectedValue = document.getElementById("dummyPatientSelect").value;
        if (dummyPatients[selectedValue]) {
            // Insert data into the form
            const patient = dummyPatients[selectedValue];
            document.getElementById("FamilyName").value = patient.FamilyName;
            document.getElementById("GivenName").value = patient.GivenName;
            document.getElementById("IdNo").value = patient.IdNo;
            document.getElementById("Birthday").value = patient.Birthday;
            document.getElementById("Gender").value = patient.Gender;
            document.getElementById("Telecom").value = patient.Telecom;
            document.getElementById("Address").value = patient.Address;
        } else {
            // Clear the form
            document.getElementById("FamilyName").value = "";
            document.getElementById("GivenName").value = "";
            document.getElementById("IdNo").value = "";
            document.getElementById("Birthday").value = "";
            document.getElementById("Gender").value = "";
            document.getElementById("Telecom").value = "09";
            document.getElementById("Address").value = "";
        }
    }

    // Function to submit data using AJAX
    function Submit() {
        const isTelecomValid = validateTelecom();
        const isIdNoValid = validateIdNo();
        const isBirthdayValid = validateBirthday();

        if (!isTelecomValid || !isIdNoValid || !isBirthdayValid) {
            alert("Please correct the highlighted fields before submitting the form.");
            return;
        }

        var formData = {
            PatientId: @PatientViewModel.PatientId,
            IdNo: document.getElementById("IdNo").value,
            Active: true,
            FamilyName: document.getElementById("FamilyName").value,
            GivenName: document.getElementById("GivenName").value,
            Telecom: document.getElementById("Telecom").value,
            Gender: document.getElementById("Gender").value,
            Birthday: document.getElementById("Birthday").value,
            Address: document.getElementById("Address").value
        };

        // console.log('formData', formData);

        $.ajax({
            url: '@Url.Content("~/Patient/Save")',
            method: 'POST',
            dataType: 'json',
            data: { PatientViewModel: formData },
            success: function (result) {
                if (result > 0) {
                    alert("Save Successful");
                } else {
                    alert(result.Error);
                }
            },
            error: function (err) {
                alert(err.responseText);
            }
        });
    }
</script>
