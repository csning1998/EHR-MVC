@{
    ViewData["Title"] = "Add Patient Information";
    List<SelectListItem> GenderCodeList = (List<SelectListItem>)ViewBag.GenderCodeList;
    PatientViewModel PatientViewModel = (PatientViewModel)ViewBag.PatientViewModel;
}

<div id="patientForm">
    <div class="modal-header">
        <h1 class="display-4">Add Patient Information</h1>
    </div>

    <div class="modal-body">
        <label class="control-label">Select a Patient (Dummy Data)</label>
        <select class="form-control" id="dummyPatientSelect" onchange="fillDummyData()">
            <option value="">-- Select a Dummy Patient --</option>
            <option value="1">Fake Data 1</option>
            <option value="2">Fake Data 2</option>
            <option value="3">Fake Data 3</option>
            <option value="4">Fake Data 4 (Debug)</option>
        </select>
    </div>

    <div class="modal-body">
        <div class="row">
            <div class="form-inline col-md-6">
                <label class="control-label">Family (Last) Name</label>
                <input type="text" class="form-control" id="FamilyName" name="FamilyName" value="@PatientViewModel.FamilyName" required>
            </div>
            <div class="form-inline col-md-6">
                <label class="control-label">Given (First) Name</label>
                <input type="text" class="form-control" id="GivenName" name="GivenName" value="@PatientViewModel.GivenName" required>
            </div>
        </div>
        <div class="row">
            <div class="form-inline col-md-3">
                <label class="control-label">ID Number</label>
                <input type="text" class="form-control" id="IdNo" name="IdNo"
                       value="@PatientViewModel.IdNo"
                       oninput="regexValidator('IdNo')"
                       required>
            </div>
            <div class="form-inline col-md-3">
                <label class="control-label">Date of Birth</label>
                <input type="date" class="form-control" id="Birthday" name="Birthday"
                       value="@PatientViewModel.Birthday.ToString("yyyy-MM-dd")"
                       oninput="regexValidator('Birthday')"
                       required>
            </div>
            <div class="form-inline col-md-3">
                <label class="control-label">Gender</label>
                @Html.DropDownList("Gender", GenderCodeList, "Please Select Gender", new { @class = "form-control", id = "Gender" })
            </div>
            <div class="form-group col-md-3">
                <label class="control-label">Phone Number</label>
                <input type="text" class="form-control" id="Telecom"
                       value="@((string.IsNullOrEmpty(PatientViewModel.Telecom) ? "09" : PatientViewModel.Telecom))"
                       oninput="regexValidator('Telecom')"
                       required>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-md-12">
                <label class="control-label">Address</label>
                <textarea class="form-control" rows="3" id="Address" name="Address">@PatientViewModel.Address</textarea>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-primary" onClick="Submit()">Save</button>
        </div>
    </div>
</div>

<script>

    const dummyPatients = {
        "1": {
            FamilyName: "O'Sullivan",
            GivenName: "Ronnie",
            IdNo: "A123456789",
            Birthday: "1975-12-05",
            Gender: "M",
            Telecom: "0912345678",
            Address: "Wordsley, West Midlands, England"
        },
        "2": {
            FamilyName: "Uncle",
            GivenName: "Roger",
            IdNo: "AB12345678",
            Birthday: "1991-03-15",
            Gender: "F",
            Telecom: "0987654321",
            Address: "7th Floor Pavilion KL, Pavilion Elite, Bukit Bintang, 55100, Kuala Lumpur, Malaysia 55100"
        },
        "3": {
            FamilyName: "馬斯克",
            GivenName: "伊隆",
            IdNo: "CE12345678",
            Birthday: "1971-06-28",
            Gender: "F",
            Telecom: "0913467985",
            Address: "美國德克薩斯州布朗斯維爾星港"
        },
        "4": {
            FamilyName: "WrongData4Test",
            GivenName: "ModifyToTest",
            IdNo: "A!12345678",
            Birthday: "1985-05-15",
            Gender: "F",
            Telecom: "0487654321",
            Address: "This is the invalid data for test purpose only"
        }
    };

    // this function aims to prevent 2nd SQL injection by sanitizing and encoding.
    function sanitizeInput(input, allowApostrophe = false) {
        // Define illegal characters, excluding apostrophe if allowed
        const illegalChars = allowApostrophe ? /[\";<>:\\|/?*]/g : /['\";<>:\\|/?*]/g;

        if (illegalChars.test(input)) {
            alert("Your input contains illegal character(s).");
            return input.replace(illegalChars, function (match) {
                return encodeURIComponent(match);
            });
        }

        return input;
    }


    function regexValidator(fieldId) {
        const value = document.getElementById(fieldId).value;
        let pattern;
        let errorMessage;
        let isValid = false;

        switch (fieldId) {
            case 'Telecom':
                pattern = /^09\d{8}$/;
                errorMessage = "Invalid Contact Number. The number must start with '09' and contain exactly 10 digits.";
                if (value.length < 10) {
                    document.getElementById(fieldId).classList.add("is-invalid");
                    return false;
                }
                isValid = pattern.test(value);
                break;
            case 'IdNo':
                pattern = /^([A-Z][1-2][0-9]{8}|[A-Z]{2}[0-9]{8})$/;
                errorMessage = "Invalid ID Format. Please check your data.";
                if (value.length < 10) {
                    document.getElementById(fieldId).classList.add("is-invalid");
                    return false;
                }
                isValid = pattern.test(value) && value.length === 10;
                break;
            case 'Birthday':
                pattern = /^\d{4}-\d{2}-\d{2}$/;
                errorMessage = "Invalid Birthday format. Please use YYYY-MM-DD format.";
                isValid = pattern.test(value);
                break;
            default:
                isValid = true;
                break;
        }
        // alert('isValid', isValid);

        if (!isValid) {
            console.error(`Invalid ${fieldId} Value: "${value}".`);
            alert(errorMessage);
            document.getElementById(fieldId).classList.add("is-invalid");
            return false;
        } else {
            document.getElementById(fieldId).classList.remove("is-invalid");
            return true;
        }
    }

    function fillDummyData() {
        const selectedValue = document.getElementById("dummyPatientSelect").value;
        if (dummyPatients[selectedValue]) {
            // Insert data into the form
            const patient = dummyPatients[selectedValue];
            document.getElementById("FamilyName").value = patient.FamilyName;
            document.getElementById("GivenName").value = patient.GivenName;
            document.getElementById("IdNo").value = patient.IdNo;
            document.getElementById("Birthday").value = patient.Birthday;
            document.getElementById("Gender").value = patient.Gender;
            document.getElementById("Telecom").value = patient.Telecom;
            document.getElementById("Address").value = patient.Address;
        } else {
            // Clear the form
            document.getElementById("FamilyName").value = "";
            document.getElementById("GivenName").value = "";
            document.getElementById("IdNo").value = "";
            document.getElementById("Birthday").value = "";
            document.getElementById("Gender").value = "";
            document.getElementById("Telecom").value = "09";
            document.getElementById("Address").value = "";
        }
    }

    // Function to submit data using AJAX
    function Submit() {
        const isTelecomValid = regexValidator('Telecom');
        const isIdNoValid = regexValidator('IdNo');
        const isBirthdayValid = regexValidator('Birthday');

        if (!isTelecomValid || !isIdNoValid || !isBirthdayValid) {
            alert("Please correct the highlighted fields before submitting the form.");
            return;
        }

        var formData = {
            PatientId: @PatientViewModel.PatientId,
            IdNo: sanitizeInput(document.getElementById("IdNo").value),
            Active: true,
            FamilyName: sanitizeInput(document.getElementById("FamilyName").value, true),
            GivenName: sanitizeInput(document.getElementById("GivenName").value, true),
            Telecom: sanitizeInput(document.getElementById("Telecom").value),
            Gender: sanitizeInput(document.getElementById("Gender").value),
            Birthday: sanitizeInput(document.getElementById("Birthday").value),
            Address: sanitizeInput(document.getElementById("Address").value, true)
        };

        // console.log('formData', formData);

        $.ajax({
            url: '@Url.Content("~/Patient/Save")',
            method: 'POST',
            dataType: 'json',
            data: { PatientViewModel: formData },
            success: function (result) {
                if (result > 0) {
                    alert("Save Successful");
                } else if (result.status === "Error") {
                    alert(result.error);
                } else {
                    alert(result.error);
                }
            },
            error: function (err) {
                alert(err.responseText);
            }
        });
    }
</script>
